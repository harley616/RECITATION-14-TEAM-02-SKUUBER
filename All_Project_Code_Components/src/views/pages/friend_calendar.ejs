<%- include ('../partials/header') %>
<%- include ('../partials/menu', {username: user}) %>

<main>

    
  <style>
    .scuuber-menu {
color: black; font-size: 19px;font-family: 'IBM Plex Mono', monospace;text-decoration: underline;
}
*{
font-family: 'IBM Plex Mono', monospace;
}
.scuuber-title {
color: black; font-size: 19px;font-family: 'IBM Plex Mono', monospace; font-weight: semibold;
}

.scuuber-text {
color: black; font-size: 15px;font-family: 'IBM Plex Mono', monospace; text-decoration: none;
}
.scuuber-btn {
color: black; font-size: 15px;font-family: 'IBM Plex Mono', monospace;
}
.scuuber-cal-text {
color: black; font-size: 10px;font-family: 'IBM Plex Mono', monospace;
margin-top: 0;
margin-bottom: 0;
margin-left:10px;
}
.scuuber-cal-text-small {
color: lightgrey; 
font-size: 8px;font-family: 'IBM Plex Mono', monospace;
}
button, input[type="submit"], input[type="reset"] {
background: none;
color: inherit;
border: none;
padding: 0;
font: inherit;
cursor: pointer;
outline: inherit;
}
#weather-popup {
background-color: #F6F1F1;
color: #19A7CE;
width: 20rem;
height: fit-content;
font-size: smaller;
}

#weather-popup .row {
margin: .5rem 0;
background-color: #146C94;
padding: .5rem;
color: #F6F1F1;
height: min-content;
border-radius: .5rem;
font-size: smaller;
}

#weather-btn {
background-color: black;
color: #F6F1F1;
width: 75%;
margin: auto;
}
#weather-tooltip{
z-index: 3;
position: absolute;
left:30%;
top:30%;
margin:auto;
width: 24rem;
}
#weather-tooltip .card{
background-color: #19A7CE;
color:#F6F1F1;

}
.calendarItem{
height: max-content;
border-radius:10px; 
width: 100%;
position:absolute;
margin:0px;
padding:.5rem 0 ;
}
*::-webkit-scrollbar {
display: none; /* for Chrome, Safari, and Opera */
}

.calendarItem{
background-color: #19A7CE;
}

.center {
display: block;
margin-left: auto;
margin-right: auto;
}

.headingitem{
background-color: #001e39;
/* background-image: url("https://static.vecteezy.com/system/resources/thumbnails/002/099/716/small_2x/mountain-beautiful-landscape-background-design-illustration-free-vector.jpg"); */
padding: 10px;
font-size: 16px;font-family: 'IBM Plex Mono';
}

.addbutton{
opacity: .75;
}

.glow {
color: #fff;
text-align: center;
-webkit-animation: glow 1s ease-in-out infinite alternate;
-moz-animation: glow 1s ease-in-out infinite alternate;
animation: glow 1s ease-in-out infinite alternate;
}

@-webkit-keyframes glow {
from {
text-shadow: 0 0 10px #fff, 0 0 20px #fff, 0 0 30px #e60073, 0 0 40px #e60073, 0 0 50px #e60073, 0 0 60px #e60073, 0 0 70px #e60073;
}
to {
text-shadow: 0 0 20px #fff, 0 0 30px #ff4da6, 0 0 40px #ff4da6, 0 0 50px #ff4da6, 0 0 60px #ff4da6, 0 0 70px #ff4da6, 0 0 80px #ff4da6;
}
}

.addbutton:hover{
opacity: 1;
-webkit-animation: glow 1s ease-in-out infinite alternate;
-moz-animation: glow 1s ease-in-out infinite alternate;
animation: glow 1s ease-in-out infinite alternate;
}

    </style>

<div class="container-fluid d-flex align-items-center justify-content-center center headingitem" style="height: 20vh;">

  <div class="container-fluid" style="width: 1000px; padding-left: 100px;">
    <div class="container-fluid">
      <h1 class="center" style="color:#F6F1F1">Friends' Calendar</h1>
    </div>
  </div>
  <div class="container-fluid">
    <div class="container-fluid" style="height: 5vh;">
      <p class="center" style="color:#F6F1F1">Welcome to your friends' calendar! Here you can see all your friends' rides for this week.</p>
    </div>
  </div>
</div>

<% var daysOfWeek = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]; %>
<% var today = new Date(); %>
<% var dayNames = daysOfWeek.slice(today.getDay()).concat(daysOfWeek.slice(0, today.getDay())); %>
<% var currMonth = today.getMonth(); %>
<% var monthsOfYear = ["Jan.", "Feb.", "Mar.", "Apr.", "May", "Jun.", "Jul.", "Aug.", "Sep.", "Oct.", "Nov.", "Dec."]; %>
<% var nameMonth = monthsOfYear[currMonth]%>

<!-- <table class="container-fluid d-flex align-items-center justify-content-center center">
  <thead>
    <tr>
      <% var dayNames = daysOfWeek.slice(today.getDay()).concat(daysOfWeek.slice(0, today.getDay())); %>
      <th><%= dayNames[0] %></th>
      <th><%= dayNames[1] %></th>
      <th><%= dayNames[2] %></th>
      <th><%= dayNames[3] %></th>
      <th><%= dayNames[4] %></th>
      <th><%= dayNames[5] %></th>
      <th><%= dayNames[6] %></th>
    </tr>
  </thead>
  <tbody>
  </tbody>
</table> -->
    
    <% if(locals.eventId){%>

        <!-- <div class="row d-flex justify-content-center align-items-center h-100" id="weather-tooltip"> -->
          <div class="col-md-8 col-lg-6 col-xl-4" id="weather-tooltip">

    
            <div class="card" style="border-radius: 35px;">
              <div class="card-body p-4">
    
                <div class="row">
                  <h6 class="col-10"><%-locals.weather_data.location.name%>, <%-locals.weather_data.location.region%></h6>
                  <div class="col-2" ><button onclick="closeWeatherModal()" style="text-decoration: none;"><i class="fa-solid fa-x"></i></button></div>
                </div>
    
                <div class="d-flex flex-column text-center mt-5 mb-4">
                  <h6 class="display-4 mb-0 font-weight-bold" style="color: black;"> <%-locals.weather_data.forecast.forecastday[locals.index].day.maxtemp_f%>°F </h6>
                  <h6 class="display-8 mb-0 font-weight-bold" style="color: black;"> <%-locals.weather_data.forecast.forecastday[locals.index].day.mintemp_f%>°F </h6>
                  <span class="small" style="color: #F6F1F1"><%-locals.weather_data.forecast.forecastday[locals.index].day.condition.text%></span>
                </div>
    
                <div class="d-flex align-items-center">
                  <div class="flex-grow-1" style="font-size: 1rem;">
                    <div><i class="fa-solid fa-wind" style="color: #F6F1F1;"></i> <span class="ms-1"> <%-locals.weather_data.forecast.forecastday[locals.index].day.maxwind_mph%> mph
                      </span></div>
                    <div><i class="fas fa-tint fa-fw" style="color: #F6F1F1;"></i> <span class="ms-1"> <%-locals.weather_data.forecast.forecastday[locals.index].day.daily_will_it_snow%>% </span>
                    </div>
                    <div><i class="fa-solid fa-ruler-vertical" style="color: #F6F1F1;"></i> <span class="ms-1"> <%-locals.weather_data.forecast.forecastday[locals.index].day.totalprecip_in%>in </span>
                    </div>
                  </div>  
                  <img src="<%-locals.weather_data.forecast.forecastday[locals.index].day.condition.icon%>"
                width="100px">                                                     
                </div>
    
              </div>
            </div>
    
          </div>
        <!-- </div> -->
    
<%}%>
    <link rel="stylesheet" href="./../../resources/css/style.css">
        <div class="row m-1">

        <div class="col-9" id="calendar">
          <!-- print the ejs object called calendarData -->
          <!-- <%= JSON.stringify(calendarData) %> -->
              <div class="container" style="border-radius: 30px;">
                  <div class="row" style="height: 100vh;">
                      <!-- ejs loop for 7 days of calendarData-->
                      <% for (let i = 0; i < 7; i++) { %>
                          <!-- header: todo add weather thing -->
                          
                          <div id="calendar-div-<%=i%>" class="col-sm overflow-auto" style="position:relative;border: 0.5px solid lightgrey;height: 85vh;margin:0px;padding:0px;margin-top:10px;background-color: #F6F1F1;">
                              <div class="weather_and_day text-center align-middle" style="border: 1px solid white;height: 12vh;margin:0px;padding:0px;background-color:  #146C94;border-radius: 5px;">
                                <div> 
                                  <h1 style="font-size: medium; padding-top: 4px;"> <%= dayNames[i] %></h1>
                                </div>
                                                                
                                <div class="d-flex" style="justify-content: space-evenly;align-items: center;margin-top: .5rem;">
                                  <h1 style="color: #F6F1F1;">
                                    <%= nameMonth %> <%= new Date((Date.now() + (i * 24 * 60 * 60 * 1000))).getDate() %>
                                  </h1>
                                  <div ></div>
                                </div>
                              </div>
                                  <!-- ejs loop for 24 hours of calendarData-->
                                  <% for (let j = 0; j < 23; j++) { %>
                                      <hr style="margin-top:3.125vh;z-index:0">
                                      <div style="position: relative; width: 20px; height: 0px">
                                          <div style="position: absolute; left: 80px; top: -20px;width: 29px; padding-left: 2px;font-size: 8px; background-color: #F6F1F1;">
                                              <p class='scuuber-cal-text-small'style="color:black;">
                                                  <%= times[j] %>
      
                                              </p>
                                          </div>
                                      </div>
                                  <% } %>
                                  <% for (let j = 0; j < calendarData[i].length; j++) { %>
                                      <div class="calendarItem" style="top: <%=calendarData[i][j].padding %>"
                                        
                                        onclick="openEventModal(
                                
                                        '<%= calendarData[i][j].owner %>',
                                        '<%= calendarData[i][j].event_id %>',
                                        '<%= calendarData[i][j].title %>'
                                    )"
                                        >
                                            <p class="align-middle scuuber-cal-text" > title: 
                                                <%= calendarData[i][j].title %>
                                            </p>
                                            <p class="align-middle scuuber-cal-text" > owner: 
                                                <%= calendarData[i][j].owner %>
                                            </p>
                                            <p class="align-middle scuuber-cal-text" > location: 
                                                <%= calendarData[i][j].location %>
                                            </p>
                                            <p class="align-middle scuuber-cal-text"> event id: 
                                                <%= calendarData[i][j].event_id %>
                                            </p>
                                            <% if (calendarData[i][j].shared) { %> 
                                                <p class="align-middle scuuber-cal-text"> friends: 
                                                    <div class="row">
                                                    <% for (let k = 0; k < calendarData[i][j].usernames.length; k++) { %>
                                                        <div class="col" style="border-radius: 5px; background: black; height:10px; width: 10px; ">
                                                            <p class='scuuber-cal-text-small'>
                                                                <%= calendarData[i][j].usernames[k] %>
                                                            </p>
                                                        </div>
                                                    <% } %>
                                                    </div>
                                                </p>
                                            <% } %>
                                            <input type="hidden" name="location" value="<%= calendarData[i][j].location %>"/>
                                            <input type="hidden" name="eventId" value="<%= calendarData[i][j].event_id %>"/>
                                            <input type="hidden" name="index" value="<%= i %>"/>
                                            <div class="row">

                                              <button class='col-6'type="submit"><i class="fa-solid fa-cloud-moon-rain" style="color:#F6F1F1"></i></button>

                                              <div class="col-6"><i class="fa-solid fa-book-open" onclick="openUpdateEventModal('<%= calendarData[i][j].title %>', '<%= calendarData[i][j].location %>', '<%= calendarData[i][j].event_id %>')" style="color:#F6F1F1"></i></div>
                                            </div>
                                      </div>
                                      
                                    <% } %>
                            </div>                 
                        <%}%>
                        </div>
                </div>
            </div>
        
        <div class="card m-0 col-3" id="weather-popup">

          <div>
            <h1 class="center" style="margin-left: auto; margin-right: auto; margin-top: 4%; font-size: large; text-align: center;">Got Weather?</h1>
            <p class="center" style="margin-left: auto; margin-right: auto; font-size: small; text-align: center; color: #001e39;"><em>Check out the snow before you go!</em></p>
          </div>

            <form action="/calendar" method="POST">
            <div class="row">
                <label for="location">Location</label>
                <input type="location" id="location" name="location" placeholder="City, State"/>
            </div>
            <div class="row">
                <button type="submit" id="weather-btn" class="btn btn-primary">Get Weather</button>
            </div>
            </form>
    
            <% if(locals.weather_data){ %>
            <% const days = ["Sunday","Monday", "Tuesday","Wednesday","Thursday","Friday","Saturday"];
            const d = new Date();%>
            <div class="card-header" id="popup-header">
            Weather for <%-locals.weather_data.location.name%>, <%-locals.weather_data.location.region%>, <%-locals.weather_data.location.country%>
            </div>
            <%for(let i = 0; i < 7; i++){ %>
            <div class="row">
                <div class="card-title" style="font-weight:bold;"><%- days[(d.getDay() + i)%7] %></div>
                <div class="col">
                <div class="list-group-item">Max Temp: <span id="temp"><%- locals.weather_data.forecast.forecastday[i].day.maxtemp_f%></span> f</div>
                <div class="list-group-item">Min Temp: <span id="temp"><%- locals.weather_data.forecast.forecastday[i].day.mintemp_f%></span> f</div>
                </div>
                <div class="col">
                <div class="list-group-item">Precipiation: <span id="precip"><%- locals.weather_data.forecast.forecastday[i].day.totalprecip_in%></span> in</div>
                <div class="list-group-item">Wind: <span id="wind"><%- locals.weather_data.forecast.forecastday[i].day.maxwind_mph%></span> mph</div>
                </div>
            </div>
                
            <% } %>
            <% } %>
        </div>
    </div>
    <!--Weather tootip-->
    <div><%-locals.eventId%></div>
          <!-- Button trigger modal -->
          <div id="event-modal" class="modal" tabindex="-1">
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title">Add shared event to your calendar</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form action="addSelfToFriendEvent", method="post">
                        <input id="modal-event-id" type="hidden" name="event_id" value="placeholder" /> 
                        <p id="modal-event-name"></p>
                        <p id="modal-event-owner"></p>
                        <p>Add event to calendar?</p>
        
                        <button id="submit_button" class="btn btn-primary" type="submit">
                            Add
                        </button>
                      </form>
                </div>
              </div>
            </div>
          </div>
            </div>
  <div id="update-event-modal" class="modal" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Update Ride</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
            <form action="updateEvent", method="post">
                <div class="mb-3" >
                    <label for="title" class="form-label">Event Name</label>
                    <input type="text" name="title" class="form-control"  id="update-title" required>
                </div>
                <div class="mb-3" >
                    <label for="location" class="form-label">Location</label>
                    <input type="text" name="location" class="form-control" id="update-location" required>
                </div>
                <input type="hidden" name="event_id" class="form-control" id="update-event_id" required>
                <button id="submit_button" class="btn btn-primary" type="submit">
                    Update Event
                </button>
              </form>
        </div>
      </div>
    </div>
  </div>
    </div>

<script>
const CALENDAR_DAYS = [
    'Sunday',
    'Monday',
    'Tuesday',
    'Wednesday',
    'Thursday',
    'Friday',
    'Saturday',
  ];
let EVENT_MODAL;
// @TO DO: Fill out the values for each field correctly.
// Location and url are intentionally mutually exclusive fields in this scenario.
// If you are adding value for one, you needn't for the other.
const initializeContent = async () => {
    //initializeContent must call /getEvents to get the list of events for the user
    // later we will also call /getFriendEvents and overlay them on the calendar
    // set the element event_name = 
    const modal_options = {
        backdrop: 'static',
        keyboard: false,
        focus: true
    }
    EVENT_MODAL = new bootstrap.Modal(document.getElementById('event-modal'), modal_options)
    /** 
    const calendarElement = document.getElementById('calendar');
calendarData[i][j]
    // forEach() allows us to perform an action, using a callback function, on each element of an array.
    CALENDAR_DAYS.forEach(day => {
        // Create a bootstrap card for each weekday
        // @TODO: Use document.createElement to create a div
        var card = document.createElement("div");//@TODO: Fill this out
        // We'll add some bootstrap classes to the div to upgrade its appearance
        // This is the equivalent of <div class="col-sm m-1 bg-white rounded px-1 px-md-2"> in HTML
        (card.className = 'col-sm m-1 bg-white rounded px-1 px-md-2');
    
        // Taking Monday as a sample for a weekday,
        // the below line of code is the equivalent of <div id="monday"> in HTML
        card.id = day.toLowerCase();
    
        // @TODO: Add the card to the calendar element you fetched in a previous step.
        // Use appendChild()
        calendarElement.appendChild(card);
    
        // Create weekday as the title. Here is an example:
        const title = document.createElement('div');
        (title.className = 'h6 text-center position-relative py-2');
        (title.innerHTML = day);
    
        // @TODO: Add the title element to the card.
        // Use appendChild()
        card.appendChild(title)
    
        // Add a button to the card to create an event
        const addEventIcon = document.createElement('i'); // allows to add icons to the UI
        addEventIcon.className =
        'bi bi-calendar-plus btn position-absolute translate-middle start-100  rounded p-0 btn-link';
    
        // adding an event listener to the click event of the icon to open the modal
        // the below line of code would be the equivalent of:
        // <i onclick="openEventModal({day: 'monday'})"> in HTML.
        addEventIcon.setAttribute('onclick', `openEventModal({day: '${card.id}'})`);
    
        // add the icon to the title div
        title.appendChild(addEventIcon);
    
        // Add one more div, to the weekday card, which will be populated with events later.
        const body = document.createElement('div');
    
        // We are adding a class for this container to able to call it when we're populating the days
        // with the events
        body.classList.add('event-container');
    
        // @TODO: Add this div to the weekday card
        // Use appendChild()
        card.appendChild(body)
    });
    */
    updateDOM();
}
const CALENDAR_EVENTS = [
    {
      name: 'running',
      day: 'tuesday',
      time: '16:00',
      modality: 'Remote',
      location: 'denver',
      url: 'https://google.com',
      attendees: 'jeff bezos, elon musk, bill gates',
    },
    {
      name: 'lecture',
      day: 'monday',
      time: '11:00',
      modality: 'In-Person',
      location: 'denver',
      url: 'https://google.com',
      attendees: 'jeff bezos, elon musk, bill gates',
    },
  ];
function updateDOM() {
 const events = CALENDAR_EVENTS;
 /*
 events.forEach((event, id) => {
   // First, let's try to update the event if it already exists.
   // @TODO: Use the `id` parameter to fetch the object if it already exists.
   // Replace <> with the appropriate variable name
   // In templated strings, you can include variables as ${var_name}.
   // For eg: let name = 'John';
   // let msg = `Welcome ${name}`;
   let eventElement = document.querySelector(`#event-${id}`);
   // if event is undefined, i.e. it doesn't exist in the CALENDAR_EVENTS array, make a new one.
   if (eventElement === null) {
     eventElement = document.createElement('div'); // @TODO: create a new div element. Use document.createElement().
     // Adding classes to the <div> element.
     eventElement.classList = 'event row border rounded m-1 py-1';
     // @TODO: Set the id attribute of the eventElement to be the same as the input id.
     // Replace <> with the correct HTML attribute
     eventElement.id = `event-${id}`;
     // Create the element for the Event Name
     const title = document.createElement('div');
     title.classList.add('col', 'event-title');
     // @TODO: Append the title element to the event element. Use .append() or .appendChild()
     // with the appropriate parent element.
     eventElement.append(title);
     eventElement.setAttribute('data-bs-toggle', 'tooltip');
     eventElement.setAttribute('data-bs-title', 'default tooltip');
   } else {
     // @TODO: Remove the old element, just in case we are changing the day while updating the event.
     // Use .remove() with the appropriate parent element.
     eventElement.remove();
   }
   // Add the Event Name
   const title = eventElement.querySelector('div.event-title');
   title.innerHTML = event.name; // event here is an input parameter to the function
   // Add a tooltip with more information on hover
   // @TODO: you will add code here when you are working on for Part B.
   // @TODO: On clicking the event div, it should open the modal with the fields pre-populated.
   // Replace <> with the triggering action.
   eventElement.setAttribute('onclick', `openEventModal({id: ${id}})`);
   // Add the event div to the parent
   document
     .querySelector(`#${event.day} .event-container`)
     .appendChild(eventElement);
 });
 */
}
function updateLocationOptions(value) {
    // @TODO: get the "Location" and "Remote URL" HTML elements from the modal.
    // Use document.querySelector() or document.getElementById().
    const location = document.getElementById('location'); //get the "Location" field
    const remoteUrl = document.getElementById('remote-url'); // get the "Remote URL" field
    const remoteUrlForm = document.querySelector('#remote-url input');
    const locationForm= document.querySelector('#remote-url input');
  
    // Depending on the "value" change the visibility of these fields on the modal.
    // Use conditional statements.
    if(value == 'In-Person'){ //specify the condition. replace the <> with a strings
        remoteUrl.style.display = 'none';
        location.style.display = 'block';
    }
    else{
        remoteUrl.style.display = 'block';
        location.style.display = 'none';
    }
  }
function openEventModal(owner, event_id, event_name) {
    console.log(owner)
    console.log(event_id)
    console.log(event_name)
    const event_name_descriptor = document.getElementById("modal-event-name");
    console.log(event_name_descriptor);
    event_name_descriptor.innerHTML = "event name: " + event_name;
    const event_owner_descriptor = document.getElementById("modal-event-owner");
    console.log(event_owner_descriptor);
    event_owner_descriptor.innerHTML = "event made by: " + owner;
    const event_id_variable = document.getElementById("modal-event-id");
    console.log(event_id_variable);
    event_id_variable.value = event_id;
    
    /*
    // Since we will be reusing the same modal for both creating and updating events,
    // we're creating variables to reference the title of the modal and the submit button
    // in javascript so we can update the text suitably
    const submitButton = document.querySelector('#submit_button');
    const modalTitle = document.querySelector('.modal-title');
  
    // Check if the event exists in the CALENDAR_EVENTS by using `id`
    // Note that on the first try, when you attempt to access an event that does not exist
    // an event will be added to the list. This is expected.
    let event = {};
    let newid = id; //CALENDAR_EVENTS.length;
  
    // If event is undefined, i.e it does not exist in the CALENDAR_EVENTS, then we create a new event.
    // Else, we load the current event into the modal.
    if (event === undefined) {
      // @TODO: Update the innerHTML for modalTitle and submitButton
      // Replace <> with the correct attribute
      modalTitle.innerHTML = 'Create Event';
      submitButton.innerHTML = 'Create Event';
  
      // Initializing an empty event
      event = {
        name: '',
        day: day,
        time: '',
        modality: '',
        location: '',
        url: '',
        attendees: '',
      };
  
      // Allocate a new event id. Note that nothing is inserted into the CALENDAR_EVENTS yet.
      // @TODO: Set the id to be the length of the CALENDAR_EVENTS because we are adding a new element
      //CALENDAR_EVENTS.push(event);
      newid = CALENDAR_EVENTS.length;
      }
      else {
      // We will default to "Update Event" as the text for the title and the submit button
      modalTitle.innerHTML = 'Update Event';
      submitButton.innerHTML = 'Update Event';
    }
  
    // Once the event is fetched/created, populate the modal.
    // @TODO: Update all form fields of the modal with suitable values from the event.
    // Use document.querySelector() to get the form elements.
    // Hint: If it is a new event, the fields in the modal will be empty.
    const EventName = document.querySelector('#event-name input');
    EventName.value = event.name;
    const Weekday = document.querySelector('#weekday select');
    Weekday.value = event.day;
    const Time = document.querySelector('#time input');
    Time.value = event.time;
    const EventModality = document.querySelector('#event-modality select');
    EventModality.value = event.modality;
    const Location = document.querySelector('#location input');
    Location.value = event.location;
    const RemoteURL = document.querySelector('#remote-url input');
    RemoteURL.value = event.url;
    const Attendees = document.querySelector('#attendees input');
    Attendees.value = event.attendees;
    // Location options depend on the event modality
    // @TODO: send modality as a variable, replace <> with appropriate argument
    updateLocationOptions(event.modality);
  
    // Set the "action" event for the form to call the updateEventFromModal
    // when the form is submitted by clicking on the "Creat/Update Event" button
    const form = document.querySelector('#event-modal form');
    form.setAttribute('action', `javascript:updateEventFromModal(${newid})`);
    */
  
    EVENT_MODAL.show();
  }
  // Updates the event for a given id with values taken from the modal.
function updateEventFromModal(id) {
    CALENDAR_EVENTS[id] = {
      name: document.querySelector('#event-name input').value,
      day: document.querySelector('#weekday select').value,
      time: document.querySelector('#time input').value,
      modality: document.querySelector('#event-modality select').value,
      location: document.querySelector('#location input').value,
      url: document.querySelector('#remote-url input').value,
      attendees: document.querySelector('#attendees input').value,
    };
  
    // Update the dom and hide the event modal
    updateDOM();
    EVENT_MODAL.hide();
  }
  setTimeout(()=>{
            initializeContent();
        }, 100); 
        // get the calendar div
        //todo make the calendar div scrollable, kind of like gcal
    </script>
  <div class="container">
    <!-- print the ejs object called calendarData -->
    <%= JSON.stringify(calendarData) %>
        <div class="container">
            <div class="row" style="height: 100vh;border-radius:10px">
                <!-- ejs loop for 7 days of calendarData-->
                <% for (let i = 0; i < 7; i++) { %>
                    <!-- header: todo add weather thing -->
                    <div id="calendar-div-<%=i%>" class="col-sm" style="position:relative;border: 0.5px solid grey;height: 85vh;margin:0px;padding:0px;margin-top:10px;">
                        <div class="weather_and_day text-center align-middle" style="border: 1px solid white;height: 10vh;margin:0px;padding:0px;background-color:rgba(56, 206, 239, 1);border-radius: 5px;">
                            <h1 class="align-middle" style="color: white;margin-top:20px;">
                                <%= new Date((Date.now() + (i * 24 * 60 * 60 * 1000))).getDate() %>
                            </h1>
                        </div>
                         <!-- ejs loop for 24 hours of calendarData-->
                        <% for (let j = 0; j < 23; j++) { %>
                            <hr style="margin-top:3.125vh;z-index:0">
                                <div style="position: relative; width: 20px; height: 0px">
                                    <div style="position: absolute; left: 80px; top: -20px;width: 29px; padding-left: 2px;font-size: 8px; background-color: white;">
                                        <p class='scuuber-cal-text-small'>
                                            <%= times[j] %>
                                        </p>
                                    </div>
                                </div>
                   
                        <% } %>
                        <% for (let j = 0; j < calendarData[i].length; j++) { %>
                            <div class="calendarItem"
                            onclick="openEventModal(
                                '<%= calendarData[i][j].owner %>',
                                '<%= calendarData[i][j].event_id %>',
                                '<%= calendarData[i][j].title %>'
                            )"
                            
                            style="border-radius:10px; width: 100%;position:absolute;height:10vh;margin:0px;top:<%=calendarData[i][j].padding %>;background-color:red">
                            <p class="align-middle scuuber-cal-text" style=""> title: 
                                <%= calendarData[i][j].title %>
                            
                            </p>
                            <p class="align-middle scuuber-cal-text" style=""> owner: 
                                <%= calendarData[i][j].owner %>
                  
                            </p>
                            <p class="align-middle scuuber-cal-text" style=""> location: 
                 
                                <%= calendarData[i][j].location %>
                            </p>
                            <p class="align-middle scuuber-cal-text" style=""> event id: 
                       
                                <%= calendarData[i][j].event_id %>
                            </p>
                            </div>
                        <% } %>
                    </div>                 
                <%}%>
            </div>
          </div>
          <!-- Button trigger modal -->
  <div id="event-modal" class="modal" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Add shared event to your calendar</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
            <form action="addSelfToFriendEvent", method="post">
                <input id="modal-event-id" type="hidden" name="event_id" value="placeholder" /> 
                <p id="modal-event-name"></p>
                <p id="modal-event-owner"></p>
                <p>Add event to calendar?</p>

                <button id="submit_button" class="btn btn-primary" type="submit">
                    Add
                </button>
              </form>
        </div>
      </div>
    </div>
  </div>
    </div>
</main>

<%- include ('../partials/footer') %>